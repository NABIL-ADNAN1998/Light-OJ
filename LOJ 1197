#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define mx 1000000

vector<int> primes;

bool a[mx + 10];

ll solution(ll l, ll r)
{
    bool isprime[r - l + 5] = {0};

    ll count = 0;
    if (l == 1)
    {
        isprime[0] = 1;
    }
    for (ll i = 0; i < primes.size() && primes[i] * primes[i] <= r; i++)
    {
        ll cp = primes[i];
        ll grab = (l / cp) * cp;
        if (grab < l)
        {
            grab += cp;
        }
        for (ll j = grab; j <= r; j += cp)
        {
            isprime[j - l] = 1;
        }
        if (grab == cp)
        {
            isprime[grab - l] = 0;
        }
    }

    for (ll i = 0; i < (r - l + 1); i++)
    {
        if (isprime[i] == 0)
        {
            count++;
        }
    }

    // for (int i = 0; i < (r - l + 1); i++)
    // {
    //     cout << i + l << " " << isprime[i] << endl;
    // }

    return count;
}

void normalSieve()
{
    ll i;
    primes.push_back(2);
    for (i = 3; (i * i) <= mx; i += 2)
    {
        if (a[i] == 0)
        {
            primes.push_back(i);
            for (ll j = i * i; j <= mx; j += i)
            {
                a[j] = 1;
            }
        }
    }

    for (; i <= mx; i += 2)
    {
        if (a[i] == 0)
        {
            primes.push_back(i);
        }
    }
}

int main()
{

    normalSieve();

    // for (int i = 0; i <= 40; i++)
    // {
    //     cout << prime1[i] << endl;
    // }
    ll t;
    cin >> t;
    for (ll i = 1; i <= t; i++)
    {
        ll l, r;
        cin >> l >> r;
        ll result = solution(l, r);
        cout << "Case " << i << ": " << result << endl;
    }
}
